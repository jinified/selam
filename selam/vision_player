#!/usr/bin/python2.7
import rospy
import cv2
from collections import defaultdict
from multiprocessing import Pool
from sensor_msgs.msg import CompressedImage

import enhancement
from vision.srv import Enhancer, EnhancerResponse
from config import Config
from core import rosimg2cv, writeCompressed


MAX_QUEUE_SIZE = 20


class VisionPlayer(object):
    """ Vision player for playing with vision algorithms """

    def __init__(self):
        self.config = Config('vision_player')
        self.pool = Pool()

        # Subscribers
        rospy.Subscriber(self.config.topics['bottomcam'][0],
                         self.config.topics['bottomcam'][1], self.bottomcam_cb)
        rospy.Subscriber(self.config.topics['frontcam'][0],
                         self.config.topics['frontcam'][1], self.frontcam_cb)
        # Publishers
        self.enhancer_pub = defaultdict(dict)

        # Services
        self.enhancer_server = rospy.Service('/vision/enhancer', Enhancer, self.enhancer_cb)

    ''' Image processing '''

    def get_cvimg(self, rawimg):
        cvimg = cv2.resize(rosimg2cv(rawimg), self.config.processed_img_size)
        return cvimg

    def process_cvimg(self, cvimg, camera):
        enhanced_imgs = [self.pool.apply_async(
            getattr(enhancement, id), (cvimg,), callback=lambda x: self.apply_enhancer(x, id, camera))
            for id in self.enhancer_pub.keys()]

    ''' Callbacks '''

    def apply_enhancer(self, img, id, camera):
        self.enhancer_pub[id][camera].publish(writeCompressed(img))
        return img

    def bottomcam_cb(self, rosimg):
        cvimg = self.get_cvimg(rosimg)
        self.process_cvimg(cvimg, 'bot')

    def frontcam_cb(self, rosimg):
        cvimg = self.get_cvimg(rosimg)
        self.process_cvimg(cvimg, 'front')

    def enhancer_cb(self, req):
        id = req.enhancer_id
        try:
            if id not in self.enhancer_pub and id in dir(enhancement):
                self.enhancer_pub[id]['bot'] = rospy.Publisher('/vision/bot/enhanced/{}/compressed'.format(id),
                                                               CompressedImage, queue_size=10)
                self.enhancer_pub[id]['front'] = rospy.Publisher('/vision/front/enhanced/{}/compressed'.format(id),
                                                                 CompressedImage, queue_size=10)
                return EnhancerResponse(True)
            return EnhancerResponse(False)
        except Exception as e:
            rospy.logwarn(e)
            return EnhancerResponse(False)

if __name__ == '__main__':
    rospy.init_node('vision_player')
    rospy.loginfo('Starting vision player')
    player = VisionPlayer()
    rospy.spin()
